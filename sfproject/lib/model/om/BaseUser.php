<?php


/**
 * Base class that represents a row from the 'user' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.7.1 on:
 *
 * Tue Jan 10 12:27:03 2017
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseUser extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'UserPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        UserPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinite loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the is_deleted field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $is_deleted;

    /**
     * The value for the updated_at field.
     * @var        string
     */
    protected $updated_at;

    /**
     * The value for the deleted_at field.
     * @var        string
     */
    protected $deleted_at;

    /**
     * The value for the created_at field.
     * @var        string
     */
    protected $created_at;

    /**
     * The value for the name field.
     * @var        string
     */
    protected $name;

    /**
     * The value for the mail field.
     * @var        string
     */
    protected $mail;

    /**
     * The value for the password field.
     * @var        string
     */
    protected $password;

    /**
     * The value for the userimg field.
     * @var        string
     */
    protected $userimg;

    /**
     * The value for the backimg field.
     * @var        string
     */
    protected $backimg;

    /**
     * The value for the maxcapa field.
     * Note: this column has a database default value of: 209715200
     * @var        int
     */
    protected $maxcapa;

    /**
     * The value for the precapa field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $precapa;

    /**
     * The value for the user_status_id field.
     * Note: this column has a database default value of: 1
     * @var        int
     */
    protected $user_status_id;

    /**
     * The value for the randnum field.
     * @var        string
     */
    protected $randnum;

    /**
     * The value for the randid field.
     * @var        string
     */
    protected $randid;

    /**
     * The value for the langid field.
     * Note: this column has a database default value of: 1
     * @var        int
     */
    protected $langid;

    /**
     * @var        UserStatus
     */
    protected $aUserStatus;

    /**
     * @var        PropelObjectCollection|File[] Collection to store aggregation of File objects.
     */
    protected $collFiles;
    protected $collFilesPartial;

    /**
     * @var        PropelObjectCollection|Group[] Collection to store aggregation of Group objects.
     */
    protected $collGroups;
    protected $collGroupsPartial;

    /**
     * @var        PropelObjectCollection|GroupMember[] Collection to store aggregation of GroupMember objects.
     */
    protected $collGroupMembers;
    protected $collGroupMembersPartial;

    /**
     * @var        PropelObjectCollection|UserLog[] Collection to store aggregation of UserLog objects.
     */
    protected $collUserLogs;
    protected $collUserLogsPartial;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * Flag to prevent endless clearAllReferences($deep=true) loop, if this object is referenced
     * @var        boolean
     */
    protected $alreadyInClearAllReferencesDeep = false;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $filesScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $groupsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $groupMembersScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $userLogsScheduledForDeletion = null;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->is_deleted = 0;
        $this->maxcapa = 209715200;
        $this->precapa = 0;
        $this->user_status_id = 1;
        $this->langid = 1;
    }

    /**
     * Initializes internal state of BaseUser object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {

        return $this->id;
    }

    /**
     * Get the [is_deleted] column value.
     *
     * @return int
     */
    public function getIsDeleted()
    {

        return $this->is_deleted;
    }

    /**
     * Get the [optionally formatted] temporal [updated_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getUpdatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->updated_at === null) {
            return null;
        }

        if ($this->updated_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->updated_at);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);

    }

    /**
     * Get the [optionally formatted] temporal [deleted_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getDeletedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->deleted_at === null) {
            return null;
        }

        if ($this->deleted_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->deleted_at);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->deleted_at, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);

    }

    /**
     * Get the [optionally formatted] temporal [created_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getCreatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->created_at === null) {
            return null;
        }

        if ($this->created_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->created_at);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);

    }

    /**
     * Get the [name] column value.
     *
     * @return string
     */
    public function getName()
    {

        return $this->name;
    }

    /**
     * Get the [mail] column value.
     *
     * @return string
     */
    public function getMail()
    {

        return $this->mail;
    }

    /**
     * Get the [password] column value.
     *
     * @return string
     */
    public function getPassword()
    {

        return $this->password;
    }

    /**
     * Get the [userimg] column value.
     *
     * @return string
     */
    public function getUserimg()
    {

        return $this->userimg;
    }

    /**
     * Get the [backimg] column value.
     *
     * @return string
     */
    public function getBackimg()
    {

        return $this->backimg;
    }

    /**
     * Get the [maxcapa] column value.
     *
     * @return int
     */
    public function getMaxcapa()
    {

        return $this->maxcapa;
    }

    /**
     * Get the [precapa] column value.
     *
     * @return int
     */
    public function getPrecapa()
    {

        return $this->precapa;
    }

    /**
     * Get the [user_status_id] column value.
     *
     * @return int
     */
    public function getUserStatusId()
    {

        return $this->user_status_id;
    }

    /**
     * Get the [randnum] column value.
     *
     * @return string
     */
    public function getRandnum()
    {

        return $this->randnum;
    }

    /**
     * Get the [randid] column value.
     *
     * @return string
     */
    public function getRandid()
    {

        return $this->randid;
    }

    /**
     * Get the [langid] column value.
     *
     * @return int
     */
    public function getLangid()
    {

        return $this->langid;
    }

    /**
     * Set the value of [id] column.
     *
     * @param  int $v new value
     * @return User The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = UserPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [is_deleted] column.
     *
     * @param  int $v new value
     * @return User The current object (for fluent API support)
     */
    public function setIsDeleted($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->is_deleted !== $v) {
            $this->is_deleted = $v;
            $this->modifiedColumns[] = UserPeer::IS_DELETED;
        }


        return $this;
    } // setIsDeleted()

    /**
     * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return User The current object (for fluent API support)
     */
    public function setUpdatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->updated_at !== null || $dt !== null) {
            $currentDateAsString = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->updated_at = $newDateAsString;
                $this->modifiedColumns[] = UserPeer::UPDATED_AT;
            }
        } // if either are not null


        return $this;
    } // setUpdatedAt()

    /**
     * Sets the value of [deleted_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return User The current object (for fluent API support)
     */
    public function setDeletedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->deleted_at !== null || $dt !== null) {
            $currentDateAsString = ($this->deleted_at !== null && $tmpDt = new DateTime($this->deleted_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->deleted_at = $newDateAsString;
                $this->modifiedColumns[] = UserPeer::DELETED_AT;
            }
        } // if either are not null


        return $this;
    } // setDeletedAt()

    /**
     * Sets the value of [created_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return User The current object (for fluent API support)
     */
    public function setCreatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->created_at !== null || $dt !== null) {
            $currentDateAsString = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->created_at = $newDateAsString;
                $this->modifiedColumns[] = UserPeer::CREATED_AT;
            }
        } // if either are not null


        return $this;
    } // setCreatedAt()

    /**
     * Set the value of [name] column.
     *
     * @param  string $v new value
     * @return User The current object (for fluent API support)
     */
    public function setName($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->name !== $v) {
            $this->name = $v;
            $this->modifiedColumns[] = UserPeer::NAME;
        }


        return $this;
    } // setName()

    /**
     * Set the value of [mail] column.
     *
     * @param  string $v new value
     * @return User The current object (for fluent API support)
     */
    public function setMail($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->mail !== $v) {
            $this->mail = $v;
            $this->modifiedColumns[] = UserPeer::MAIL;
        }


        return $this;
    } // setMail()

    /**
     * Set the value of [password] column.
     *
     * @param  string $v new value
     * @return User The current object (for fluent API support)
     */
    public function setPassword($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->password !== $v) {
            $this->password = $v;
            $this->modifiedColumns[] = UserPeer::PASSWORD;
        }


        return $this;
    } // setPassword()

    /**
     * Set the value of [userimg] column.
     *
     * @param  string $v new value
     * @return User The current object (for fluent API support)
     */
    public function setUserimg($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->userimg !== $v) {
            $this->userimg = $v;
            $this->modifiedColumns[] = UserPeer::USERIMG;
        }


        return $this;
    } // setUserimg()

    /**
     * Set the value of [backimg] column.
     *
     * @param  string $v new value
     * @return User The current object (for fluent API support)
     */
    public function setBackimg($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->backimg !== $v) {
            $this->backimg = $v;
            $this->modifiedColumns[] = UserPeer::BACKIMG;
        }


        return $this;
    } // setBackimg()

    /**
     * Set the value of [maxcapa] column.
     *
     * @param  int $v new value
     * @return User The current object (for fluent API support)
     */
    public function setMaxcapa($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->maxcapa !== $v) {
            $this->maxcapa = $v;
            $this->modifiedColumns[] = UserPeer::MAXCAPA;
        }


        return $this;
    } // setMaxcapa()

    /**
     * Set the value of [precapa] column.
     *
     * @param  int $v new value
     * @return User The current object (for fluent API support)
     */
    public function setPrecapa($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->precapa !== $v) {
            $this->precapa = $v;
            $this->modifiedColumns[] = UserPeer::PRECAPA;
        }


        return $this;
    } // setPrecapa()

    /**
     * Set the value of [user_status_id] column.
     *
     * @param  int $v new value
     * @return User The current object (for fluent API support)
     */
    public function setUserStatusId($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->user_status_id !== $v) {
            $this->user_status_id = $v;
            $this->modifiedColumns[] = UserPeer::USER_STATUS_ID;
        }

        if ($this->aUserStatus !== null && $this->aUserStatus->getId() !== $v) {
            $this->aUserStatus = null;
        }


        return $this;
    } // setUserStatusId()

    /**
     * Set the value of [randnum] column.
     *
     * @param  string $v new value
     * @return User The current object (for fluent API support)
     */
    public function setRandnum($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->randnum !== $v) {
            $this->randnum = $v;
            $this->modifiedColumns[] = UserPeer::RANDNUM;
        }


        return $this;
    } // setRandnum()

    /**
     * Set the value of [randid] column.
     *
     * @param  string $v new value
     * @return User The current object (for fluent API support)
     */
    public function setRandid($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->randid !== $v) {
            $this->randid = $v;
            $this->modifiedColumns[] = UserPeer::RANDID;
        }


        return $this;
    } // setRandid()

    /**
     * Set the value of [langid] column.
     *
     * @param  int $v new value
     * @return User The current object (for fluent API support)
     */
    public function setLangid($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->langid !== $v) {
            $this->langid = $v;
            $this->modifiedColumns[] = UserPeer::LANGID;
        }


        return $this;
    } // setLangid()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->is_deleted !== 0) {
                return false;
            }

            if ($this->maxcapa !== 209715200) {
                return false;
            }

            if ($this->precapa !== 0) {
                return false;
            }

            if ($this->user_status_id !== 1) {
                return false;
            }

            if ($this->langid !== 1) {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which resultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->is_deleted = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
            $this->updated_at = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->deleted_at = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->created_at = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
            $this->name = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
            $this->mail = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
            $this->password = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
            $this->userimg = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
            $this->backimg = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
            $this->maxcapa = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
            $this->precapa = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
            $this->user_status_id = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
            $this->randnum = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
            $this->randid = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
            $this->langid = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }
            $this->postHydrate($row, $startcol, $rehydrate);

            return $startcol + 16; // 16 = UserPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating User object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

        if ($this->aUserStatus !== null && $this->user_status_id !== $this->aUserStatus->getId()) {
            $this->aUserStatus = null;
        }
    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = UserPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->aUserStatus = null;
            $this->collFiles = null;

            $this->collGroups = null;

            $this->collGroupMembers = null;

            $this->collUserLogs = null;

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = UserQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseUser:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseUser:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseUser:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            // symfony_timestampable behavior
            if ($this->isModified() && !$this->isColumnModified(UserPeer::UPDATED_AT))
            {
                $this->setUpdatedAt(time());
            }
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
                // symfony_timestampable behavior
                if (!$this->isColumnModified(UserPeer::CREATED_AT))
                {
                  $this->setCreatedAt(time());
                }

            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseUser:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                UserPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            // We call the save method on the following object(s) if they
            // were passed to this object by their corresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aUserStatus !== null) {
                if ($this->aUserStatus->isModified() || $this->aUserStatus->isNew()) {
                    $affectedRows += $this->aUserStatus->save($con);
                }
                $this->setUserStatus($this->aUserStatus);
            }

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            if ($this->filesScheduledForDeletion !== null) {
                if (!$this->filesScheduledForDeletion->isEmpty()) {
                    foreach ($this->filesScheduledForDeletion as $file) {
                        // need to save related object because we set the relation to null
                        $file->save($con);
                    }
                    $this->filesScheduledForDeletion = null;
                }
            }

            if ($this->collFiles !== null) {
                foreach ($this->collFiles as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->groupsScheduledForDeletion !== null) {
                if (!$this->groupsScheduledForDeletion->isEmpty()) {
                    foreach ($this->groupsScheduledForDeletion as $group) {
                        // need to save related object because we set the relation to null
                        $group->save($con);
                    }
                    $this->groupsScheduledForDeletion = null;
                }
            }

            if ($this->collGroups !== null) {
                foreach ($this->collGroups as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->groupMembersScheduledForDeletion !== null) {
                if (!$this->groupMembersScheduledForDeletion->isEmpty()) {
                    foreach ($this->groupMembersScheduledForDeletion as $groupMember) {
                        // need to save related object because we set the relation to null
                        $groupMember->save($con);
                    }
                    $this->groupMembersScheduledForDeletion = null;
                }
            }

            if ($this->collGroupMembers !== null) {
                foreach ($this->collGroupMembers as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->userLogsScheduledForDeletion !== null) {
                if (!$this->userLogsScheduledForDeletion->isEmpty()) {
                    foreach ($this->userLogsScheduledForDeletion as $userLog) {
                        // need to save related object because we set the relation to null
                        $userLog->save($con);
                    }
                    $this->userLogsScheduledForDeletion = null;
                }
            }

            if ($this->collUserLogs !== null) {
                foreach ($this->collUserLogs as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = UserPeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . UserPeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(UserPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`id`';
        }
        if ($this->isColumnModified(UserPeer::IS_DELETED)) {
            $modifiedColumns[':p' . $index++]  = '`is_deleted`';
        }
        if ($this->isColumnModified(UserPeer::UPDATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`updated_at`';
        }
        if ($this->isColumnModified(UserPeer::DELETED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`deleted_at`';
        }
        if ($this->isColumnModified(UserPeer::CREATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`created_at`';
        }
        if ($this->isColumnModified(UserPeer::NAME)) {
            $modifiedColumns[':p' . $index++]  = '`name`';
        }
        if ($this->isColumnModified(UserPeer::MAIL)) {
            $modifiedColumns[':p' . $index++]  = '`mail`';
        }
        if ($this->isColumnModified(UserPeer::PASSWORD)) {
            $modifiedColumns[':p' . $index++]  = '`password`';
        }
        if ($this->isColumnModified(UserPeer::USERIMG)) {
            $modifiedColumns[':p' . $index++]  = '`userimg`';
        }
        if ($this->isColumnModified(UserPeer::BACKIMG)) {
            $modifiedColumns[':p' . $index++]  = '`backimg`';
        }
        if ($this->isColumnModified(UserPeer::MAXCAPA)) {
            $modifiedColumns[':p' . $index++]  = '`maxcapa`';
        }
        if ($this->isColumnModified(UserPeer::PRECAPA)) {
            $modifiedColumns[':p' . $index++]  = '`precapa`';
        }
        if ($this->isColumnModified(UserPeer::USER_STATUS_ID)) {
            $modifiedColumns[':p' . $index++]  = '`user_status_id`';
        }
        if ($this->isColumnModified(UserPeer::RANDNUM)) {
            $modifiedColumns[':p' . $index++]  = '`randnum`';
        }
        if ($this->isColumnModified(UserPeer::RANDID)) {
            $modifiedColumns[':p' . $index++]  = '`randid`';
        }
        if ($this->isColumnModified(UserPeer::LANGID)) {
            $modifiedColumns[':p' . $index++]  = '`langid`';
        }

        $sql = sprintf(
            'INSERT INTO `user` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`id`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`is_deleted`':
                        $stmt->bindValue($identifier, $this->is_deleted, PDO::PARAM_INT);
                        break;
                    case '`updated_at`':
                        $stmt->bindValue($identifier, $this->updated_at, PDO::PARAM_STR);
                        break;
                    case '`deleted_at`':
                        $stmt->bindValue($identifier, $this->deleted_at, PDO::PARAM_STR);
                        break;
                    case '`created_at`':
                        $stmt->bindValue($identifier, $this->created_at, PDO::PARAM_STR);
                        break;
                    case '`name`':
                        $stmt->bindValue($identifier, $this->name, PDO::PARAM_STR);
                        break;
                    case '`mail`':
                        $stmt->bindValue($identifier, $this->mail, PDO::PARAM_STR);
                        break;
                    case '`password`':
                        $stmt->bindValue($identifier, $this->password, PDO::PARAM_STR);
                        break;
                    case '`userimg`':
                        $stmt->bindValue($identifier, $this->userimg, PDO::PARAM_STR);
                        break;
                    case '`backimg`':
                        $stmt->bindValue($identifier, $this->backimg, PDO::PARAM_STR);
                        break;
                    case '`maxcapa`':
                        $stmt->bindValue($identifier, $this->maxcapa, PDO::PARAM_INT);
                        break;
                    case '`precapa`':
                        $stmt->bindValue($identifier, $this->precapa, PDO::PARAM_INT);
                        break;
                    case '`user_status_id`':
                        $stmt->bindValue($identifier, $this->user_status_id, PDO::PARAM_INT);
                        break;
                    case '`randnum`':
                        $stmt->bindValue($identifier, $this->randnum, PDO::PARAM_STR);
                        break;
                    case '`randid`':
                        $stmt->bindValue($identifier, $this->randid, PDO::PARAM_STR);
                        break;
                    case '`langid`':
                        $stmt->bindValue($identifier, $this->langid, PDO::PARAM_INT);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
            $pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        }

        $this->validationFailures = $res;

        return false;
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggregated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objects otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            // We call the validate method on the following object(s) if they
            // were passed to this object by their corresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aUserStatus !== null) {
                if (!$this->aUserStatus->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aUserStatus->getValidationFailures());
                }
            }


            if (($retval = UserPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }


                if ($this->collFiles !== null) {
                    foreach ($this->collFiles as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collGroups !== null) {
                    foreach ($this->collGroups as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collGroupMembers !== null) {
                    foreach ($this->collGroupMembers as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collUserLogs !== null) {
                    foreach ($this->collUserLogs as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }


            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = UserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getIsDeleted();
                break;
            case 2:
                return $this->getUpdatedAt();
                break;
            case 3:
                return $this->getDeletedAt();
                break;
            case 4:
                return $this->getCreatedAt();
                break;
            case 5:
                return $this->getName();
                break;
            case 6:
                return $this->getMail();
                break;
            case 7:
                return $this->getPassword();
                break;
            case 8:
                return $this->getUserimg();
                break;
            case 9:
                return $this->getBackimg();
                break;
            case 10:
                return $this->getMaxcapa();
                break;
            case 11:
                return $this->getPrecapa();
                break;
            case 12:
                return $this->getUserStatusId();
                break;
            case 13:
                return $this->getRandnum();
                break;
            case 14:
                return $this->getRandid();
                break;
            case 15:
                return $this->getLangid();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['User'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['User'][$this->getPrimaryKey()] = true;
        $keys = UserPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getIsDeleted(),
            $keys[2] => $this->getUpdatedAt(),
            $keys[3] => $this->getDeletedAt(),
            $keys[4] => $this->getCreatedAt(),
            $keys[5] => $this->getName(),
            $keys[6] => $this->getMail(),
            $keys[7] => $this->getPassword(),
            $keys[8] => $this->getUserimg(),
            $keys[9] => $this->getBackimg(),
            $keys[10] => $this->getMaxcapa(),
            $keys[11] => $this->getPrecapa(),
            $keys[12] => $this->getUserStatusId(),
            $keys[13] => $this->getRandnum(),
            $keys[14] => $this->getRandid(),
            $keys[15] => $this->getLangid(),
        );
        $virtualColumns = $this->virtualColumns;
        foreach ($virtualColumns as $key => $virtualColumn) {
            $result[$key] = $virtualColumn;
        }

        if ($includeForeignObjects) {
            if (null !== $this->aUserStatus) {
                $result['UserStatus'] = $this->aUserStatus->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->collFiles) {
                $result['Files'] = $this->collFiles->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collGroups) {
                $result['Groups'] = $this->collGroups->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collGroupMembers) {
                $result['GroupMembers'] = $this->collGroupMembers->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collUserLogs) {
                $result['UserLogs'] = $this->collUserLogs->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = UserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setIsDeleted($value);
                break;
            case 2:
                $this->setUpdatedAt($value);
                break;
            case 3:
                $this->setDeletedAt($value);
                break;
            case 4:
                $this->setCreatedAt($value);
                break;
            case 5:
                $this->setName($value);
                break;
            case 6:
                $this->setMail($value);
                break;
            case 7:
                $this->setPassword($value);
                break;
            case 8:
                $this->setUserimg($value);
                break;
            case 9:
                $this->setBackimg($value);
                break;
            case 10:
                $this->setMaxcapa($value);
                break;
            case 11:
                $this->setPrecapa($value);
                break;
            case 12:
                $this->setUserStatusId($value);
                break;
            case 13:
                $this->setRandnum($value);
                break;
            case 14:
                $this->setRandid($value);
                break;
            case 15:
                $this->setLangid($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = UserPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setIsDeleted($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setUpdatedAt($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setDeletedAt($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setCreatedAt($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setName($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setMail($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setPassword($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setUserimg($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setBackimg($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setMaxcapa($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setPrecapa($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setUserStatusId($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setRandnum($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setRandid($arr[$keys[14]]);
        if (array_key_exists($keys[15], $arr)) $this->setLangid($arr[$keys[15]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(UserPeer::DATABASE_NAME);

        if ($this->isColumnModified(UserPeer::ID)) $criteria->add(UserPeer::ID, $this->id);
        if ($this->isColumnModified(UserPeer::IS_DELETED)) $criteria->add(UserPeer::IS_DELETED, $this->is_deleted);
        if ($this->isColumnModified(UserPeer::UPDATED_AT)) $criteria->add(UserPeer::UPDATED_AT, $this->updated_at);
        if ($this->isColumnModified(UserPeer::DELETED_AT)) $criteria->add(UserPeer::DELETED_AT, $this->deleted_at);
        if ($this->isColumnModified(UserPeer::CREATED_AT)) $criteria->add(UserPeer::CREATED_AT, $this->created_at);
        if ($this->isColumnModified(UserPeer::NAME)) $criteria->add(UserPeer::NAME, $this->name);
        if ($this->isColumnModified(UserPeer::MAIL)) $criteria->add(UserPeer::MAIL, $this->mail);
        if ($this->isColumnModified(UserPeer::PASSWORD)) $criteria->add(UserPeer::PASSWORD, $this->password);
        if ($this->isColumnModified(UserPeer::USERIMG)) $criteria->add(UserPeer::USERIMG, $this->userimg);
        if ($this->isColumnModified(UserPeer::BACKIMG)) $criteria->add(UserPeer::BACKIMG, $this->backimg);
        if ($this->isColumnModified(UserPeer::MAXCAPA)) $criteria->add(UserPeer::MAXCAPA, $this->maxcapa);
        if ($this->isColumnModified(UserPeer::PRECAPA)) $criteria->add(UserPeer::PRECAPA, $this->precapa);
        if ($this->isColumnModified(UserPeer::USER_STATUS_ID)) $criteria->add(UserPeer::USER_STATUS_ID, $this->user_status_id);
        if ($this->isColumnModified(UserPeer::RANDNUM)) $criteria->add(UserPeer::RANDNUM, $this->randnum);
        if ($this->isColumnModified(UserPeer::RANDID)) $criteria->add(UserPeer::RANDID, $this->randid);
        if ($this->isColumnModified(UserPeer::LANGID)) $criteria->add(UserPeer::LANGID, $this->langid);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(UserPeer::DATABASE_NAME);
        $criteria->add(UserPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of User (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setIsDeleted($this->getIsDeleted());
        $copyObj->setUpdatedAt($this->getUpdatedAt());
        $copyObj->setDeletedAt($this->getDeletedAt());
        $copyObj->setCreatedAt($this->getCreatedAt());
        $copyObj->setName($this->getName());
        $copyObj->setMail($this->getMail());
        $copyObj->setPassword($this->getPassword());
        $copyObj->setUserimg($this->getUserimg());
        $copyObj->setBackimg($this->getBackimg());
        $copyObj->setMaxcapa($this->getMaxcapa());
        $copyObj->setPrecapa($this->getPrecapa());
        $copyObj->setUserStatusId($this->getUserStatusId());
        $copyObj->setRandnum($this->getRandnum());
        $copyObj->setRandid($this->getRandid());
        $copyObj->setLangid($this->getLangid());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            foreach ($this->getFiles() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addFile($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getGroups() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addGroup($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getGroupMembers() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addGroupMember($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getUserLogs() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addUserLog($relObj->copy($deepCopy));
                }
            }

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return User Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return UserPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new UserPeer();
        }

        return self::$peer;
    }

    /**
     * Declares an association between this object and a UserStatus object.
     *
     * @param                  UserStatus $v
     * @return User The current object (for fluent API support)
     * @throws PropelException
     */
    public function setUserStatus(UserStatus $v = null)
    {
        if ($v === null) {
            $this->setUserStatusId(1);
        } else {
            $this->setUserStatusId($v->getId());
        }

        $this->aUserStatus = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the UserStatus object, it will not be re-added.
        if ($v !== null) {
            $v->addUser($this);
        }


        return $this;
    }


    /**
     * Get the associated UserStatus object
     *
     * @param PropelPDO $con Optional Connection object.
     * @param $doQuery Executes a query to get the object if required
     * @return UserStatus The associated UserStatus object.
     * @throws PropelException
     */
    public function getUserStatus(PropelPDO $con = null, $doQuery = true)
    {
        if ($this->aUserStatus === null && ($this->user_status_id !== null) && $doQuery) {
            $this->aUserStatus = UserStatusQuery::create()->findPk($this->user_status_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aUserStatus->addUsers($this);
             */
        }

        return $this->aUserStatus;
    }


    /**
     * Initializes a collection based on the name of a relation.
     * Avoids crafting an 'init[$relationName]s' method name
     * that wouldn't work when StandardEnglishPluralizer is used.
     *
     * @param string $relationName The name of the relation to initialize
     * @return void
     */
    public function initRelation($relationName)
    {
        if ('File' == $relationName) {
            $this->initFiles();
        }
        if ('Group' == $relationName) {
            $this->initGroups();
        }
        if ('GroupMember' == $relationName) {
            $this->initGroupMembers();
        }
        if ('UserLog' == $relationName) {
            $this->initUserLogs();
        }
    }

    /**
     * Clears out the collFiles collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return User The current object (for fluent API support)
     * @see        addFiles()
     */
    public function clearFiles()
    {
        $this->collFiles = null; // important to set this to null since that means it is uninitialized
        $this->collFilesPartial = null;

        return $this;
    }

    /**
     * reset is the collFiles collection loaded partially
     *
     * @return void
     */
    public function resetPartialFiles($v = true)
    {
        $this->collFilesPartial = $v;
    }

    /**
     * Initializes the collFiles collection.
     *
     * By default this just sets the collFiles collection to an empty array (like clearcollFiles());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initFiles($overrideExisting = true)
    {
        if (null !== $this->collFiles && !$overrideExisting) {
            return;
        }
        $this->collFiles = new PropelObjectCollection();
        $this->collFiles->setModel('File');
    }

    /**
     * Gets an array of File objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this User is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|File[] List of File objects
     * @throws PropelException
     */
    public function getFiles($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collFilesPartial && !$this->isNew();
        if (null === $this->collFiles || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collFiles) {
                // return empty collection
                $this->initFiles();
            } else {
                $collFiles = FileQuery::create(null, $criteria)
                    ->filterByUser($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collFilesPartial && count($collFiles)) {
                      $this->initFiles(false);

                      foreach ($collFiles as $obj) {
                        if (false == $this->collFiles->contains($obj)) {
                          $this->collFiles->append($obj);
                        }
                      }

                      $this->collFilesPartial = true;
                    }

                    $collFiles->getInternalIterator()->rewind();

                    return $collFiles;
                }

                if ($partial && $this->collFiles) {
                    foreach ($this->collFiles as $obj) {
                        if ($obj->isNew()) {
                            $collFiles[] = $obj;
                        }
                    }
                }

                $this->collFiles = $collFiles;
                $this->collFilesPartial = false;
            }
        }

        return $this->collFiles;
    }

    /**
     * Sets a collection of File objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $files A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return User The current object (for fluent API support)
     */
    public function setFiles(PropelCollection $files, PropelPDO $con = null)
    {
        $filesToDelete = $this->getFiles(new Criteria(), $con)->diff($files);


        $this->filesScheduledForDeletion = $filesToDelete;

        foreach ($filesToDelete as $fileRemoved) {
            $fileRemoved->setUser(null);
        }

        $this->collFiles = null;
        foreach ($files as $file) {
            $this->addFile($file);
        }

        $this->collFiles = $files;
        $this->collFilesPartial = false;

        return $this;
    }

    /**
     * Returns the number of related File objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related File objects.
     * @throws PropelException
     */
    public function countFiles(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collFilesPartial && !$this->isNew();
        if (null === $this->collFiles || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collFiles) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getFiles());
            }
            $query = FileQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByUser($this)
                ->count($con);
        }

        return count($this->collFiles);
    }

    /**
     * Method called to associate a File object to this object
     * through the File foreign key attribute.
     *
     * @param    File $l File
     * @return User The current object (for fluent API support)
     */
    public function addFile(File $l)
    {
        if ($this->collFiles === null) {
            $this->initFiles();
            $this->collFilesPartial = true;
        }

        if (!in_array($l, $this->collFiles->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddFile($l);

            if ($this->filesScheduledForDeletion and $this->filesScheduledForDeletion->contains($l)) {
                $this->filesScheduledForDeletion->remove($this->filesScheduledForDeletion->search($l));
            }
        }

        return $this;
    }

    /**
     * @param	File $file The file object to add.
     */
    protected function doAddFile($file)
    {
        $this->collFiles[]= $file;
        $file->setUser($this);
    }

    /**
     * @param	File $file The file object to remove.
     * @return User The current object (for fluent API support)
     */
    public function removeFile($file)
    {
        if ($this->getFiles()->contains($file)) {
            $this->collFiles->remove($this->collFiles->search($file));
            if (null === $this->filesScheduledForDeletion) {
                $this->filesScheduledForDeletion = clone $this->collFiles;
                $this->filesScheduledForDeletion->clear();
            }
            $this->filesScheduledForDeletion[]= $file;
            $file->setUser(null);
        }

        return $this;
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this User is new, it will return
     * an empty collection; or if this User has previously
     * been saved, it will retrieve related Files from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in User.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|File[] List of File objects
     */
    public function getFilesJoinGroup($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = FileQuery::create(null, $criteria);
        $query->joinWith('Group', $join_behavior);

        return $this->getFiles($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this User is new, it will return
     * an empty collection; or if this User has previously
     * been saved, it will retrieve related Files from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in User.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|File[] List of File objects
     */
    public function getFilesJoinFileRelatedByParentDirectoryId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = FileQuery::create(null, $criteria);
        $query->joinWith('FileRelatedByParentDirectoryId', $join_behavior);

        return $this->getFiles($query, $con);
    }

    /**
     * Clears out the collGroups collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return User The current object (for fluent API support)
     * @see        addGroups()
     */
    public function clearGroups()
    {
        $this->collGroups = null; // important to set this to null since that means it is uninitialized
        $this->collGroupsPartial = null;

        return $this;
    }

    /**
     * reset is the collGroups collection loaded partially
     *
     * @return void
     */
    public function resetPartialGroups($v = true)
    {
        $this->collGroupsPartial = $v;
    }

    /**
     * Initializes the collGroups collection.
     *
     * By default this just sets the collGroups collection to an empty array (like clearcollGroups());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initGroups($overrideExisting = true)
    {
        if (null !== $this->collGroups && !$overrideExisting) {
            return;
        }
        $this->collGroups = new PropelObjectCollection();
        $this->collGroups->setModel('Group');
    }

    /**
     * Gets an array of Group objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this User is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Group[] List of Group objects
     * @throws PropelException
     */
    public function getGroups($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collGroupsPartial && !$this->isNew();
        if (null === $this->collGroups || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collGroups) {
                // return empty collection
                $this->initGroups();
            } else {
                $collGroups = GroupQuery::create(null, $criteria)
                    ->filterByUser($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collGroupsPartial && count($collGroups)) {
                      $this->initGroups(false);

                      foreach ($collGroups as $obj) {
                        if (false == $this->collGroups->contains($obj)) {
                          $this->collGroups->append($obj);
                        }
                      }

                      $this->collGroupsPartial = true;
                    }

                    $collGroups->getInternalIterator()->rewind();

                    return $collGroups;
                }

                if ($partial && $this->collGroups) {
                    foreach ($this->collGroups as $obj) {
                        if ($obj->isNew()) {
                            $collGroups[] = $obj;
                        }
                    }
                }

                $this->collGroups = $collGroups;
                $this->collGroupsPartial = false;
            }
        }

        return $this->collGroups;
    }

    /**
     * Sets a collection of Group objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $groups A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return User The current object (for fluent API support)
     */
    public function setGroups(PropelCollection $groups, PropelPDO $con = null)
    {
        $groupsToDelete = $this->getGroups(new Criteria(), $con)->diff($groups);


        $this->groupsScheduledForDeletion = $groupsToDelete;

        foreach ($groupsToDelete as $groupRemoved) {
            $groupRemoved->setUser(null);
        }

        $this->collGroups = null;
        foreach ($groups as $group) {
            $this->addGroup($group);
        }

        $this->collGroups = $groups;
        $this->collGroupsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related Group objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Group objects.
     * @throws PropelException
     */
    public function countGroups(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collGroupsPartial && !$this->isNew();
        if (null === $this->collGroups || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collGroups) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getGroups());
            }
            $query = GroupQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByUser($this)
                ->count($con);
        }

        return count($this->collGroups);
    }

    /**
     * Method called to associate a Group object to this object
     * through the Group foreign key attribute.
     *
     * @param    Group $l Group
     * @return User The current object (for fluent API support)
     */
    public function addGroup(Group $l)
    {
        if ($this->collGroups === null) {
            $this->initGroups();
            $this->collGroupsPartial = true;
        }

        if (!in_array($l, $this->collGroups->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddGroup($l);

            if ($this->groupsScheduledForDeletion and $this->groupsScheduledForDeletion->contains($l)) {
                $this->groupsScheduledForDeletion->remove($this->groupsScheduledForDeletion->search($l));
            }
        }

        return $this;
    }

    /**
     * @param	Group $group The group object to add.
     */
    protected function doAddGroup($group)
    {
        $this->collGroups[]= $group;
        $group->setUser($this);
    }

    /**
     * @param	Group $group The group object to remove.
     * @return User The current object (for fluent API support)
     */
    public function removeGroup($group)
    {
        if ($this->getGroups()->contains($group)) {
            $this->collGroups->remove($this->collGroups->search($group));
            if (null === $this->groupsScheduledForDeletion) {
                $this->groupsScheduledForDeletion = clone $this->collGroups;
                $this->groupsScheduledForDeletion->clear();
            }
            $this->groupsScheduledForDeletion[]= $group;
            $group->setUser(null);
        }

        return $this;
    }

    /**
     * Clears out the collGroupMembers collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return User The current object (for fluent API support)
     * @see        addGroupMembers()
     */
    public function clearGroupMembers()
    {
        $this->collGroupMembers = null; // important to set this to null since that means it is uninitialized
        $this->collGroupMembersPartial = null;

        return $this;
    }

    /**
     * reset is the collGroupMembers collection loaded partially
     *
     * @return void
     */
    public function resetPartialGroupMembers($v = true)
    {
        $this->collGroupMembersPartial = $v;
    }

    /**
     * Initializes the collGroupMembers collection.
     *
     * By default this just sets the collGroupMembers collection to an empty array (like clearcollGroupMembers());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initGroupMembers($overrideExisting = true)
    {
        if (null !== $this->collGroupMembers && !$overrideExisting) {
            return;
        }
        $this->collGroupMembers = new PropelObjectCollection();
        $this->collGroupMembers->setModel('GroupMember');
    }

    /**
     * Gets an array of GroupMember objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this User is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|GroupMember[] List of GroupMember objects
     * @throws PropelException
     */
    public function getGroupMembers($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collGroupMembersPartial && !$this->isNew();
        if (null === $this->collGroupMembers || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collGroupMembers) {
                // return empty collection
                $this->initGroupMembers();
            } else {
                $collGroupMembers = GroupMemberQuery::create(null, $criteria)
                    ->filterByUser($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collGroupMembersPartial && count($collGroupMembers)) {
                      $this->initGroupMembers(false);

                      foreach ($collGroupMembers as $obj) {
                        if (false == $this->collGroupMembers->contains($obj)) {
                          $this->collGroupMembers->append($obj);
                        }
                      }

                      $this->collGroupMembersPartial = true;
                    }

                    $collGroupMembers->getInternalIterator()->rewind();

                    return $collGroupMembers;
                }

                if ($partial && $this->collGroupMembers) {
                    foreach ($this->collGroupMembers as $obj) {
                        if ($obj->isNew()) {
                            $collGroupMembers[] = $obj;
                        }
                    }
                }

                $this->collGroupMembers = $collGroupMembers;
                $this->collGroupMembersPartial = false;
            }
        }

        return $this->collGroupMembers;
    }

    /**
     * Sets a collection of GroupMember objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $groupMembers A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return User The current object (for fluent API support)
     */
    public function setGroupMembers(PropelCollection $groupMembers, PropelPDO $con = null)
    {
        $groupMembersToDelete = $this->getGroupMembers(new Criteria(), $con)->diff($groupMembers);


        $this->groupMembersScheduledForDeletion = $groupMembersToDelete;

        foreach ($groupMembersToDelete as $groupMemberRemoved) {
            $groupMemberRemoved->setUser(null);
        }

        $this->collGroupMembers = null;
        foreach ($groupMembers as $groupMember) {
            $this->addGroupMember($groupMember);
        }

        $this->collGroupMembers = $groupMembers;
        $this->collGroupMembersPartial = false;

        return $this;
    }

    /**
     * Returns the number of related GroupMember objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related GroupMember objects.
     * @throws PropelException
     */
    public function countGroupMembers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collGroupMembersPartial && !$this->isNew();
        if (null === $this->collGroupMembers || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collGroupMembers) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getGroupMembers());
            }
            $query = GroupMemberQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByUser($this)
                ->count($con);
        }

        return count($this->collGroupMembers);
    }

    /**
     * Method called to associate a GroupMember object to this object
     * through the GroupMember foreign key attribute.
     *
     * @param    GroupMember $l GroupMember
     * @return User The current object (for fluent API support)
     */
    public function addGroupMember(GroupMember $l)
    {
        if ($this->collGroupMembers === null) {
            $this->initGroupMembers();
            $this->collGroupMembersPartial = true;
        }

        if (!in_array($l, $this->collGroupMembers->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddGroupMember($l);

            if ($this->groupMembersScheduledForDeletion and $this->groupMembersScheduledForDeletion->contains($l)) {
                $this->groupMembersScheduledForDeletion->remove($this->groupMembersScheduledForDeletion->search($l));
            }
        }

        return $this;
    }

    /**
     * @param	GroupMember $groupMember The groupMember object to add.
     */
    protected function doAddGroupMember($groupMember)
    {
        $this->collGroupMembers[]= $groupMember;
        $groupMember->setUser($this);
    }

    /**
     * @param	GroupMember $groupMember The groupMember object to remove.
     * @return User The current object (for fluent API support)
     */
    public function removeGroupMember($groupMember)
    {
        if ($this->getGroupMembers()->contains($groupMember)) {
            $this->collGroupMembers->remove($this->collGroupMembers->search($groupMember));
            if (null === $this->groupMembersScheduledForDeletion) {
                $this->groupMembersScheduledForDeletion = clone $this->collGroupMembers;
                $this->groupMembersScheduledForDeletion->clear();
            }
            $this->groupMembersScheduledForDeletion[]= $groupMember;
            $groupMember->setUser(null);
        }

        return $this;
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this User is new, it will return
     * an empty collection; or if this User has previously
     * been saved, it will retrieve related GroupMembers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in User.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|GroupMember[] List of GroupMember objects
     */
    public function getGroupMembersJoinGroup($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = GroupMemberQuery::create(null, $criteria);
        $query->joinWith('Group', $join_behavior);

        return $this->getGroupMembers($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this User is new, it will return
     * an empty collection; or if this User has previously
     * been saved, it will retrieve related GroupMembers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in User.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|GroupMember[] List of GroupMember objects
     */
    public function getGroupMembersJoinAuthLevelStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = GroupMemberQuery::create(null, $criteria);
        $query->joinWith('AuthLevelStatus', $join_behavior);

        return $this->getGroupMembers($query, $con);
    }

    /**
     * Clears out the collUserLogs collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return User The current object (for fluent API support)
     * @see        addUserLogs()
     */
    public function clearUserLogs()
    {
        $this->collUserLogs = null; // important to set this to null since that means it is uninitialized
        $this->collUserLogsPartial = null;

        return $this;
    }

    /**
     * reset is the collUserLogs collection loaded partially
     *
     * @return void
     */
    public function resetPartialUserLogs($v = true)
    {
        $this->collUserLogsPartial = $v;
    }

    /**
     * Initializes the collUserLogs collection.
     *
     * By default this just sets the collUserLogs collection to an empty array (like clearcollUserLogs());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initUserLogs($overrideExisting = true)
    {
        if (null !== $this->collUserLogs && !$overrideExisting) {
            return;
        }
        $this->collUserLogs = new PropelObjectCollection();
        $this->collUserLogs->setModel('UserLog');
    }

    /**
     * Gets an array of UserLog objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this User is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|UserLog[] List of UserLog objects
     * @throws PropelException
     */
    public function getUserLogs($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collUserLogsPartial && !$this->isNew();
        if (null === $this->collUserLogs || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collUserLogs) {
                // return empty collection
                $this->initUserLogs();
            } else {
                $collUserLogs = UserLogQuery::create(null, $criteria)
                    ->filterByUser($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collUserLogsPartial && count($collUserLogs)) {
                      $this->initUserLogs(false);

                      foreach ($collUserLogs as $obj) {
                        if (false == $this->collUserLogs->contains($obj)) {
                          $this->collUserLogs->append($obj);
                        }
                      }

                      $this->collUserLogsPartial = true;
                    }

                    $collUserLogs->getInternalIterator()->rewind();

                    return $collUserLogs;
                }

                if ($partial && $this->collUserLogs) {
                    foreach ($this->collUserLogs as $obj) {
                        if ($obj->isNew()) {
                            $collUserLogs[] = $obj;
                        }
                    }
                }

                $this->collUserLogs = $collUserLogs;
                $this->collUserLogsPartial = false;
            }
        }

        return $this->collUserLogs;
    }

    /**
     * Sets a collection of UserLog objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $userLogs A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return User The current object (for fluent API support)
     */
    public function setUserLogs(PropelCollection $userLogs, PropelPDO $con = null)
    {
        $userLogsToDelete = $this->getUserLogs(new Criteria(), $con)->diff($userLogs);


        $this->userLogsScheduledForDeletion = $userLogsToDelete;

        foreach ($userLogsToDelete as $userLogRemoved) {
            $userLogRemoved->setUser(null);
        }

        $this->collUserLogs = null;
        foreach ($userLogs as $userLog) {
            $this->addUserLog($userLog);
        }

        $this->collUserLogs = $userLogs;
        $this->collUserLogsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related UserLog objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related UserLog objects.
     * @throws PropelException
     */
    public function countUserLogs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collUserLogsPartial && !$this->isNew();
        if (null === $this->collUserLogs || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collUserLogs) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getUserLogs());
            }
            $query = UserLogQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByUser($this)
                ->count($con);
        }

        return count($this->collUserLogs);
    }

    /**
     * Method called to associate a UserLog object to this object
     * through the UserLog foreign key attribute.
     *
     * @param    UserLog $l UserLog
     * @return User The current object (for fluent API support)
     */
    public function addUserLog(UserLog $l)
    {
        if ($this->collUserLogs === null) {
            $this->initUserLogs();
            $this->collUserLogsPartial = true;
        }

        if (!in_array($l, $this->collUserLogs->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddUserLog($l);

            if ($this->userLogsScheduledForDeletion and $this->userLogsScheduledForDeletion->contains($l)) {
                $this->userLogsScheduledForDeletion->remove($this->userLogsScheduledForDeletion->search($l));
            }
        }

        return $this;
    }

    /**
     * @param	UserLog $userLog The userLog object to add.
     */
    protected function doAddUserLog($userLog)
    {
        $this->collUserLogs[]= $userLog;
        $userLog->setUser($this);
    }

    /**
     * @param	UserLog $userLog The userLog object to remove.
     * @return User The current object (for fluent API support)
     */
    public function removeUserLog($userLog)
    {
        if ($this->getUserLogs()->contains($userLog)) {
            $this->collUserLogs->remove($this->collUserLogs->search($userLog));
            if (null === $this->userLogsScheduledForDeletion) {
                $this->userLogsScheduledForDeletion = clone $this->collUserLogs;
                $this->userLogsScheduledForDeletion->clear();
            }
            $this->userLogsScheduledForDeletion[]= $userLog;
            $userLog->setUser(null);
        }

        return $this;
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this User is new, it will return
     * an empty collection; or if this User has previously
     * been saved, it will retrieve related UserLogs from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in User.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|UserLog[] List of UserLog objects
     */
    public function getUserLogsJoinGroup($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = UserLogQuery::create(null, $criteria);
        $query->joinWith('Group', $join_behavior);

        return $this->getUserLogs($query, $con);
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->is_deleted = null;
        $this->updated_at = null;
        $this->deleted_at = null;
        $this->created_at = null;
        $this->name = null;
        $this->mail = null;
        $this->password = null;
        $this->userimg = null;
        $this->backimg = null;
        $this->maxcapa = null;
        $this->precapa = null;
        $this->user_status_id = null;
        $this->randnum = null;
        $this->randid = null;
        $this->langid = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->alreadyInClearAllReferencesDeep = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volume/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep && !$this->alreadyInClearAllReferencesDeep) {
            $this->alreadyInClearAllReferencesDeep = true;
            if ($this->collFiles) {
                foreach ($this->collFiles as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collGroups) {
                foreach ($this->collGroups as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collGroupMembers) {
                foreach ($this->collGroupMembers as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collUserLogs) {
                foreach ($this->collUserLogs as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->aUserStatus instanceof Persistent) {
              $this->aUserStatus->clearAllReferences($deep);
            }

            $this->alreadyInClearAllReferencesDeep = false;
        } // if ($deep)

        if ($this->collFiles instanceof PropelCollection) {
            $this->collFiles->clearIterator();
        }
        $this->collFiles = null;
        if ($this->collGroups instanceof PropelCollection) {
            $this->collGroups->clearIterator();
        }
        $this->collGroups = null;
        if ($this->collGroupMembers instanceof PropelCollection) {
            $this->collGroupMembers->clearIterator();
        }
        $this->collGroupMembers = null;
        if ($this->collUserLogs instanceof PropelCollection) {
            $this->collUserLogs->clearIterator();
        }
        $this->collUserLogs = null;
        $this->aUserStatus = null;
    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(UserPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BaseUser:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
